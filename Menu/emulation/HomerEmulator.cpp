//============================================================================
// Name        : hemu.cpp
// Author      : Daniele Colombo
// Version     :
// Copyright   : GPL 2
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <GL/freeglut.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <HomerEmulator.hpp>
#include <memory>
#include <HwEmulated.hpp>

using namespace std;
using namespace homerio;

namespace homeremulator {

GLubyte space[] =
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

GLubyte numbers[][13] = {
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x5a, 0x5a, 0x5a, 0x42, 0x42, 0x24, 0x18}, // 0
		{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x38, 0x18}, // 1
		{0x00, 0x00, 0x7e, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x42, 0x24, 0x18}, // 2
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x02, 0x04, 0x08, 0x04, 0x02, 0x42, 0x24, 0x18}, // 3
		{0x00, 0x00, 0x04, 0x04, 0x7e, 0x44, 0x44, 0x24, 0x24, 0x14, 0x14, 0x0c, 0x04}, // 4
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x02, 0x02, 0x04, 0x78, 0x40, 0x40, 0x40, 0x7e}, // 5
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x62, 0x5c, 0x40, 0x40, 0x42, 0x24, 0x18}, // 6
		{0x00, 0x00, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x7e}, // 7
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18}, // 8
		{0x00, 0x00, 0x18, 0x24, 0x42, 0x02, 0x02, 0x3a, 0x46, 0x42, 0x42, 0x24, 0x18} // 9
};

GLubyte letters[][13] = {
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18},
{0x00, 0x00, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e},
{0x00, 0x00, 0x7c, 0xee, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xff, 0xff, 0xe7, 0xc3},
{0x00, 0x00, 0xc7, 0xc7, 0xcf, 0xcf, 0xdf, 0xdb, 0xfb, 0xf3, 0xf3, 0xe3, 0xe3},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x3f, 0x6e, 0xdf, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0xe0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x7e, 0x0c, 0x06, 0x03, 0x03, 0xff}
};

GLuint fontOffset;

GLfloat white[3] = { 1.0, 1.0, 1.0 };
GLfloat green[3] = { 0.0, 1.0, 0.0 };
GLfloat black[3] = { 0.0, 0.0, 0.0 };
GLfloat grey[3] = { 0.5, 0.5, 0.5 };
GLfloat lightgrey[3] = { 0.9, 0.9, 0.9 };

HomerEmulator* GL_callbacks::homerEmulator = nullptr;

	void GL_callbacks::reshape(int w, int h)
	{
	   glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	   glMatrixMode(GL_PROJECTION);
	   glLoadIdentity();
	   glOrtho (0.0, w, 0.0, h, -1.0, 1.0);
	   glMatrixMode(GL_MODELVIEW);
	}

	void GL_callbacks::keypress(unsigned char key, int x, int y) {
		homerEmulator->getKeyEmulator().gl_key_press(key,x,y);
	}
	void GL_callbacks::keyrelease(unsigned char key, int x, int y) {
		homerEmulator->getKeyEmulator().gl_key_release(key,x,y);
	}

	void GL_callbacks::display(void)
	{
	   glClear(GL_COLOR_BUFFER_BIT);
 	   homerEmulator->getDisplay().draw();
	   glFlush();
	}
	void GL_callbacks::idle(void)
	{
		glutPostRedisplay();
	}

	void GL_callbacks::timer(int value)
	{
		glutPostRedisplay();
		glutTimerFunc(homerEmulator->getRefreshRate(), GL_callbacks::timer, value);
	}
	HomerEmulator::HomerEmulator(int gl_argc, char** gl_argv, Scheduler& shd,KeyPanel& kp, BoardEmulated& board) :
		scheduler(shd), keyPanel(kp), acquaA5(board), display(keyPanel,scheduler,board) {
		this->gl_argc = gl_argc;
		this->gl_argv = gl_argv;
		this->refreshRate = HEMUL_REFRESHRATE;
		GL_callbacks::setHomerEmulator(this);
	}

	int HomerEmulator::start() {
		   glutInit(&gl_argc, gl_argv);
		   glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		   glutInitWindowSize(400, 200);
		   glutInitWindowPosition (100, 100);
		   glutCreateWindow("Homer");
		   glShadeModel (GL_FLAT);
		   makeRasterFont();
		   glutSetOption(GLUT_ACTION_ON_WINDOW_CLOSE,GLUT_ACTION_GLUTMAINLOOP_RETURNS);
		   glutReshapeFunc(GL_callbacks::reshape);
		   key_emulator.gl_start();
		   glutSetKeyRepeat	(GLUT_KEY_REPEAT_OFF );
		   glutKeyboardFunc(GL_callbacks::keypress);
		   glutKeyboardUpFunc(GL_callbacks::keyrelease);
		   glutDisplayFunc(GL_callbacks::display);
//		   glutIdleFunc(GL_callbacks::idle);
		   glutTimerFunc(0, GL_callbacks::timer, 0);
		   return 0;
	}
	void HomerEmulator::mainLoop() {
		glutMainLoop();
	}



	void HomerEmulator::makeRasterFont(void)
	{
	   GLuint i, j;
	   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

	   fontOffset = glGenLists (128);
	   for (i = 0,j = '0'; i <= 9; i++,j++) {
	      glNewList(fontOffset + j, GL_COMPILE);
	      glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, numbers[i]);
	      glEndList();
	   }
	  for (i = 0,j = 'A'; i < 26; i++,j++) {
	      glNewList(fontOffset + j, GL_COMPILE);
	      glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, letters[i]);
	      glEndList();
	   }
	   glNewList(fontOffset + ' ', GL_COMPILE);
	   glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, space);
	   glEndList();
	}

}


